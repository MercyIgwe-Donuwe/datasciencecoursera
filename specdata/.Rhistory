q()
q()
dat<-read.spss("Complete project data.sav",to.data.frame = T)
as.numeric(dat$Num_Female)
install.packages("read.spss")
?spss
foreign
foreign::read.spss("Complete project data.sav",to.data.frame = T)
foreign::read.spss("My Data",to.data.frame = T)
getOption("repos")
getOption("repos")
install.packages("rtools")
getOption("repos")
install.packages("rtools")
getOption("repos")
getOption("repos")
foreign::read.spss("My Data",to.data.frame = T)
foreign::read.spss("My Data.sav",to.data.frame = T)
foreign(spss)
load(spss)
library("foreign", lib.loc="C:/Program Files/R/R-3.4.1/library")
x<-factor(c("yes","yes","no","yes","no"))
x
table(x)
unclass(x)
x<-factor(c("yes","yes","no","yes","no"), levels = c("yes","no"))
x
unclass(x)
x<-c(1,2,NA,10,3)
is.na(x)
x<-c(1,2,NaN,NA,4)
is.na(x)
is.nan(x)
x<-data.frame(foo = 1:14, bar = c(T,T,F,F))
x<-data.frame(foo = 1:4, bar = c(T,T,F,F))
x
nrow
nrow(x)
ncol(x)
x<-1:3
names(x)
names(x)<-c("foo","bar","norf")
x
names(x)
x <- list(a = 1, b = 2, c = 3)
x
m <-matrix (1:4, nrow =2, ncol=2)
dimnames(m)<- list(c("a","b"),c("c","d"))
m
initial<-read.table("datatable.txt", nrow = 100)
y<-data.frame(a=1,b="a")
dput (y)
dput(y,file="y.R")
new.y<-dget("y.R")
new.y
x<-"foo"
y <- data.frame (a =1, b="a")
dump(c("x","y"), file ="data.R")
rm(x,y)
source("data.R")
y
x
install.packages("caret")
install.packages("caret")
install.packages("xtable")
install.packages("stargazer")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
load(caret)
load("caret")
getwd()
library(caret)
ls()
rm(list=ls())
load(swirl)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
(6 == 7)
6 == 7
6 < 7
10<=10
5 != 7
5 != 7
5 != 7
5 == 7
5 ! 7
5 != 7
info()
nxt ()
5 !TRUE 7
5 !FALSE 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(true, false, false)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
3
xor(5 == 6)
xor(5 == 6, !FALSE)
ints<-sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all (ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4 , div = 2)
args(remainder)
submit()
submit()
submit()
submit()
evaluate(sd, c(1.4, 3.6 , 7.9, 8.8))
evaluate(function(x){x + 1}, 6)
evaluate(function(x){x},c(8,4,0),)
evaluate(function(x){x},c(8,4,0),[1])
evaluate(function(x){x},c(8,4,0))
evaluate(function(x)[1],c(8,4,0))
evaluate(function(x){[1]},c(8,4,0))
evaluate(function(x){x = 1},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(length(x){x[3]},c(8,4,0))
evaluate(function(length(x)){x[3]},c(8,4,0))
evaluate(function(length(x)){x},c(8,4,0))
evaluate(function(length(x){x}),c(8,4,0))
evaluate(function(x){length (x)},c(8,4,0))
info()
nxt()
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(length(x){x[3]}, c(8,4,0))
evaluate(length(x){x}, c(8,4,0))
evaluate(length(x){x$3}, c(8,4,0))
evaluate(length(x), c(8,4,0))
evaluate(x=length(x){x}, c(8,4,0))
evaluate(x=length(x), c(8,4,0))
evaluate(x=length(x){x[n]}, c(8,4,0))
evaluate(x=length(x){x[3]}, c(8,4,0))
nxt()
evaluate(x=length(x){length(x)},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("I", "am", "tired")
submit
submit()
submit()
submit()
submit()
submit()
submit()
nxt()
info()
nxt()
submit()
submit()
mad_libs(Nigeria, should, Mercy)
mad_libs(place, adjective, noun)
mad_libs("Nigeria", "Should", "Mercy")
submit
submit()
submit()
'Hello' %p% 'student'
nxt()
submit()
submit()
submit()
%p%('I', 'love', 'R')
%p% ('I', 'love', 'R')
%p% ('I', 'love', 'R!')
%p% ('I', 'love R!')
args(%p%)
"%p%" ('I', 'love', 'R')
"%p%" ('I', 'love R!')
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass
unclass(d2)
Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
Date(d1)
d1
weekdays(d1)
months(t1)
quarters(t1,t2)
quarters(t2)
t3<- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y, %H:%M")
t4<-strptime(t3, "%B %d, %Y, %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class()
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
1
0
x <- 1:10
if (x>5) {
x <- 0
}
f<- function(x){
g <- function(y) {
y + z
}
z <-4
x + g (x)
}
z <- 10
f (3)
x <- 5
y <- if (x <3) {
NA
} else {
10
}
y
h <- function(x,y = NULL, d = 3L) {
z <- cbind (x,d)
if (!is,null(y))
if (!is.null(y))
z<- z + y
h <- function(x,y = NULL, d = 3L) {
+ z <- cbind (x,d)
+ if (!is.null(y))
z <- z + y
else
z <- z + f
getwd()
ls()
exit()
else}
getwd()
setwd("C:/Users/user/Desktop/Mercy/specdata")
directory<-read.csv(specdata.csv)
print(R.version.string)
source("pollutantmean.R")
print(R.version.string)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean<- function(directory, pollutant, id = 1:332){
mydata <-list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id){
dat <- rbind (dat, read.csv(mydata[i]))
}
mean(dat[,pollutant], na.rm = TRUE)
}
print(R.version.string)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
complete<-function(directory, id = 1:332){
mydata<-list.files(directory, full.names = TRUE)
for (i in id){
dat<-rbind(dat, read.csv(mydata[i]))
}
nobs <- complete.cases(dat)
return(c(id, nobs))
}
source("complete.R")
complete("specdata",i)
complete("specdata",1)
complete<-function(directory, id = 1:332){
mydata<-list.files(directory, full.names = TRUE)
mon <- data.frame()
for (i in id){
dat<- read.csv(mydata[i])
nobs <- sum(complete.cases(dat))
tmp <- data.frame(i, nobs)
mon <- rbind (mon, tmp)
}
colnames(mon) <- c("id", "nobs")
mon
}
complete("specdata",1)
corr <- function (directory, threshold = 0) {
mydata<-list.files(directory, full.names = TRUE)
dat <- vector(mode, "numeric", length = 0)
for (i in 1:length(mydata)) {
mon <- read.csv(mydata[1])
add <- sum ((!is.na(mon$sulfate)) & (!is.na(mon$nitrate)))
if (add > threshold) {
tmp <- mon [which(!is.na(mon$sulfate)),]
submon<- tmp [which(!is.na(tmp$nitrate)),]
dat <- c (dat, cor(submon$sulfate, submon$nitrate))
}
}
dat
}
print(R.version.string)
source(corr.R)
getwd()
source(corr.R)
ls()
corr <- function (directory, threshold = 0) {
mydata<-list.files(directory, full.names = TRUE)
dat <- vector(mode, "numeric", length = 0)
for (i in 1:length(mydata)) {
mon <- read.csv(mydata[1])
add <- sum ((!is.na(mon$sulfate)) & (!is.na(mon$nitrate)))
if (add > threshold) {
tmp <- mon [which(!is.na(mon$sulfate)),]
submon<- tmp [which(!is.na(tmp$nitrate)),]
dat <- c (dat, cor(submon$sulfate, submon$nitrate))
}
}
dat
}
source("corr.R")
source("complete.R")
cr<-corr("specdata",150)
head(cr)
cr<-corr("specdata",150)
source("complete.R")
source("corr.R")
cr<-corr("specdata",150)
head(cr)
summary (cr)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc<-complete("specdata", c(6,10,20,34,100,200,310))
print(cc$nobs)
cc<-complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc<-complete("specdata", 332:1)
use <- sample (332:10)
print(cc[use,"nobs"])
set.seed(42)
cc<-complete("specdata", 332:1)
use <- sample (332:10)
use <- sample (332,10)
print(cc[use,"nobs"])
set.seed(42)
cc<-complete("specdata", 332:1)
use <- sample (332,10)
print(cc[use,"nobs"])
cr<-corr("specdata")
cr<- sort (cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr<-corr("specdata", 129)
cr<- sort (cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr<-corr("specdata", 2000)
n <- length(cr)
cr<-corr("specdata", 1000)
cr<- sort (cr)
print(c(n,round(cr,4)))
